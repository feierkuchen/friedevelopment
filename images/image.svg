<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="svg7351" version="1.0" viewBox="0 0 141.399 144.2"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><defs id="defs3"><linearGradient id="linearGradient3194"><stop id="stop3196" offset="0" stop-color="#ff0"/><stop id="stop3198" offset="1" stop-color="#fff"/></linearGradient><linearGradient id="linearGradient3210" y2="108.55" xlink:href="#linearGradient3194" gradientUnits="userSpaceOnUse" x2="55.274" y1="104.99" x1="74.256" gradientTransform="translate(-32.113 -53.713)"/><linearGradient id="linearGradient3218" y2="87.772" xlink:href="#linearGradient3194" gradientUnits="userSpaceOnUse" x2="103.2" y1="71.621" x1="94.685"/><linearGradient id="linearGradient3226" y2="101.8" xlink:href="#linearGradient3194" gradientUnits="userSpaceOnUse" x2="136.3" y1="101.8" x1="105.5"/><linearGradient id="linearGradient3234" y2="164.95" xlink:href="#linearGradient3194" gradientUnits="userSpaceOnUse" x2="139" y1="138.4" x1="117.46" gradientTransform="translate(-32.113 -53.713)"/><linearGradient id="linearGradient3236" y2="148.94" xlink:href="#linearGradient3194" gradientUnits="userSpaceOnUse" x2="103.24" y1="115.82" x1="63.647"/></defs><path d="M75.7 111.8l-15.5.8 45.5 27.6 8.7-5.9-8.7-46 31.7-33-3.6-11.3-52.1-1.6 11.8 10.7L76 20 61.9 4 42.4 47 4 57.6 29.6 87l-9.1 48.4 21.2-4.3 34-19.3z" id="path3238" fill="none" stroke="#ff1c00" stroke-width="8" stroke-linecap="butt" stroke-linejoin="round" stroke-miterlimit="4" stroke-dasharray="none" stroke-opacity=".492"/><path d="M75.7 111.8l-15.5.8 45.5 27.6 8.7-5.9-8.7-46 31.7-33-3.6-11.3-52.1-1.6 11.8 10.7L76 20 61.9 4 42.4 47 4 57.6 29.6 87l-9.1 48.4 21.2-4.3 34-19.3z" id="path7727" fill="#eec229" fill-opacity="1" stroke="none" stroke-width=".808" stroke-linecap="round" stroke-linejoin="round" stroke-opacity=".669"/><path d="M60.2 112.6l-39.7 22.8 7.1-17.7 29-17.2 3.6 12.1z" id="line262" fill="#fff239" fill-opacity="1" stroke="none" stroke-width=".808" stroke-linecap="round" stroke-linejoin="round"/><path d="M14.6 60.3l19.6 22-4.6 4.7L4 57.6l10.6 2.7z" id="line270" fill="#fff239" fill-opacity="1" stroke="none" stroke-width=".808" stroke-linecap="round" stroke-linejoin="round"/><path d="M58.1 21L43.6 52.8 42.4 47 61.9 4l-3.8 17z" id="line278" fill="#eeb129" fill-opacity="1" stroke="none" stroke-width=".808" stroke-linecap="round" stroke-linejoin="round" stroke-opacity=".669"/><path d="M105.7 140.2l-45.5-27.6-3.6-12.1 31.6 18.4" id="path7659" fill="#eec229" fill-opacity="1" stroke="none" stroke-width=".808" stroke-linecap="round" stroke-linejoin="round" stroke-opacity=".669"/><path d="M27.6 117.7l-7.1 17.7L29.6 87l4.6-4.7-6.6 35.4z" id="line266" fill="#eec229" fill-opacity="1" stroke="none" stroke-width=".808" stroke-linecap="round" stroke-linejoin="round" stroke-opacity=".669"/><path d="M95.7 84.3L133.8 44l-25.5 7.4-26.6 28.5" id="line250" fill="#fff239" fill-opacity="1" stroke="none" stroke-width=".808" stroke-linecap="round" stroke-linejoin="round"/><path d="M56.6 100.5l-29 17.2 6.6-35.4-19.6-22 29-7.5L58.1 21m-1.5 79.5l31.6 18.4-6.5-39 26.6-28.5-36.1-1.7L58.1 21" id="path7705" fill="#fff918" fill-opacity="1" stroke="none" stroke-width=".808" stroke-linecap="round" stroke-linejoin="round"/><g id="g4171" transform="translate(-1.187 -1.187)" fill="#ffd539" fill-opacity="1" stroke="none" stroke-width=".808" stroke-linecap="round" stroke-linejoin="round"><path id="line260" d="M89.387 120.087l17.5 21.3-10-55.9-14-4.4 6.5 39z"/><path id="path7657" d="M63.086999999999996 5.187000000000001l-3.8 17 14.1 28.7 9.5-7.3-19.8-38.4z"/><path id="line274" d="M43.587 48.187l-38.4 10.6 10.6 2.7 29-7.5-1.2-5.8z"/><path id="line244" d="M109.487 52.587l-36.1-1.7 9.5-7.3 52.1 1.6-25.5 7.4z"/></g></svg>